---
title: "Joining Data Sets <br><br> ðŸ–‡"
subtitle: "Fall 2017"
author: "Tyson S. Barrett"
output:
  xaringan::moon_reader:
    lib_dir: libs
    css: pres.css
    nature:
      highlightStyle: github
      highlightLines: true
      countIncrementalSlides: false
      ratio: '16:9'
---

```{r setup, include=FALSE}
options(htmltools.dir.version = FALSE)
```

# What can be done with data...

.large[.huge[.center[
[Tesla Autopilot 2.0](https://www.youtube.com/watch?v=C3DbrYx-SN4)
]]]

---
# Joining Data Sets

![](general_joining_graphic.jpg)


---
# Some Vocabulary

.pull-left[
.large[.large[
- .dcoral[**Join (merge)**] = combining two data sets (or *tables*) based on some **primary key(s)**
- .nicegreen[**Primary Key**] = a variable that uniquely identifies observations in a table
]]]

.footnote[
[R For Data Science](http://r4ds.had.co.nz/relational-data.html)
]

--

.pull-right[
.large[.large[
- .bluer[**Foreign Key**] = a variable that uniquely identifies an observation in another table
- .dcoral[**Relation**] = the relationship between a primary key and a foreign key (generally a 1-to-many relationship)
]]]

---
background-image: url(key_diagram.jpg)
background-position: 50% 85%
background-size: 800px

# Example


---
# Types of Joins

.pull-left[.large[.large[
.dcoral[**Inner Join**] = joining only the observations that are in both tables

.bluer[**Left Join**] = joining all observations in first table but drop those in the second that are not in the first
]]]

.pull-right[.large[.large[
.nicegreen[**Right Join**] = joining all observations in second table but drop those in the first that are not in the second

.dcoral[**Full (Outer) Join**] = joining all the observations whether they are in one or both tables
]]]

---
# Inner Join

.huge[Joining only the observations that are in both tables]

![](inner_join_venn.png)

---
background-image: url(inner_join_diagram.png)
background-position: 50% 65%
background-size: 900px

# Inner Join


---
# Left Join

.huge[joining all observations in first table but drop those in the second that are not in the first]

![](left_join_venn.png)

---
# Right Join

.huge[joining all observations in second table but drop those in the first that are not in the second]

![](right_join_venn.png)

---
# Full Join

.huge[Joining all the observations whether they are in one or both tables]

![](full_join_venn.png)


---
background-image: url(leftrightfull_diagram.png)
background-position: 75% 50%
background-size: 500px


# What These <br> Look Like

---
background-image: url(binding_diagram.jpg)
background-position: 50% 90%
background-size: 600px

# Binding

.huge[
Sometimes we don't need to join, we need to .dcoral[**bind**]
]

---
# Review Questions

.huge[
- Explain joining in a sentence or two.
]

--

.huge[
- If you have more individuals in data set 1 than data set 2 and you want to keep all of the observations, what kind of join is best?
]

--

.huge[
- Thought Experiment: What would happen if you tried to join on something other than your primary key (e.g., it is the primary key in one table but just a foreign key in another)?
]

---
# Answers

.huge[
- Joining is taking two data sets and joining them based on identifiers (keys) or something like that.

- Either left join or full join.

- This situation is called duplicate keys. See next slide for an example.
]

---
background-image: url(duplicatekeys_diagram.png)
background-position: 50% 80%
background-size: 800px

# Duplicate Keys

.huge[For `x` this is a foreign key and for `y` it is a primary key. Why is that?]

---
background-image: url(key_diagram.jpg)
background-position: 50% 85%
background-size: 800px

# Let's Join!

---
# Health

```{r, echo=FALSE, warning=FALSE, message=FALSE}
library(tidyverse)
load("data_officeparks/OfficeParks_Tables.rda")

health %>%
  DT::datatable(options = list(pageLength = 4, 
                               autoWidth = TRUE),
                rownames = FALSE)
```

---
# Demographics

```{r, echo=FALSE}
demo %>%
  DT::datatable(options = list(pageLength = 4, 
                               autoWidth = TRUE),
                rownames = FALSE)
```

---
# Show Info

```{r, echo=FALSE}
show %>%
  DT::datatable(options = list(pageLength = 4, dom = "t",
                               autoWidth = TRUE),
                rownames = FALSE)
```


---
# Inner Join

```{r, echo=TRUE, eval=FALSE}
inner_join(show, demo, by = "show")
```

```{r, eval=TRUE, echo=FALSE, warning=FALSE, message=FALSE}
inner_join(show, demo, by = "show") %>%
  DT::datatable(options = list(pageLength = 4, dom = "t",
                               autoWidth = TRUE),
                rownames = FALSE)
```

---
# Left and Right Joins

### Left

```{r, echo=TRUE, eval=FALSE}
left_join(show, demo, by = "show")
```

### Right

```{r, echo=TRUE, eval=FALSE}
right_join(show, demo, by = "show")
```

---
# Full Joins

```{r, echo=TRUE, eval=FALSE}
full_join(show, demo, by = "show")
```

```{r, eval=TRUE, echo=FALSE, warning=FALSE, message=FALSE}
full_join(show, demo, by = "show") %>%
  DT::datatable(options = list(pageLength = 4, dom = "t",
                               autoWidth = TRUE),
                rownames = FALSE)
```

---
# Join Health and Demographics

.huge[
Notable aspects of these sets:
]

.large[.large[
- Health is in long form (two time points)

- Demographics and health have multiple overlapping primary keys (`nam` and `show`)
]]

---
# Join Health and Demographics

```{r, echo=TRUE, eval=FALSE}
full_join(health, demo, by = c("nam", "show")) ## or inner_, left_,, or right_
```

```{r, eval=TRUE, echo=FALSE, warning=FALSE, message=FALSE}
full_join(health, demo, by = c("nam", "show")) %>%
  DT::datatable(options = list(pageLength = 4,
                               autoWidth = TRUE),
                rownames = FALSE)
```

---
# What if we .dcoral[forgot] one of the .nicegreen[keys]?

```{r, echo=TRUE, eval=FALSE}
full_join(health, demo, by = "nam")
```

.large[.large[
This provides 80 rows (not the correct 76)
]]

--

<br>

```{r, echo=TRUE, eval=FALSE}
full_join(health, demo, by = "show")
```

.large[.large[
This provides 1,480 rows (not the correct 76)
]]

--

<br>

.center[.large[.large[.dcoral[ Why might this happen? ]]]]

---
background-image: url(fig_bad_join.jpg)
background-position: 50% 85%
background-size: 1000px

# .nicegreen[Unique] Identifiers

.huge[If we don't have unique identifiers the data can blow up]


---
# Other Common Errors...

.huge[
1. Understand your data (both primary and foreign keys, missing values)

2. Trying to join when should be "binding"
]

---
# What About Missing?

.huge[
Notes:

1. If .dcoral[key] (primary or foreign) is missing, those cannot be joined with the correct data (it will keep those in `full_join()`)

2. Other missing values are carried into the joined set
]

---
# .dcoral[Bind], Instead of Join

.huge[
What if we have two versions of the demographics table

- One that contains info on "Parks and Rec"
- The other on "The Office"

.bluer[Do we have keys we can join on?]
]

--

.huge[
Nope...
]

---
background-image: url(binding_diagram.jpg)
background-position: 50% 90%
background-size: 600px

# .dcoral[Bind], Instead of Join

```{r, eval=FALSE}
rbind(office_health, parks_health)
```



---
# Resources

.huge[
[R For Data Science by Garrett Grolemund and Hadley Wickham](http://r4ds.had.co.nz/relational-data.html)
]







